// ----------------------------------
// RSDK Project: Sonic 1/Sonic 2
// Script Description: Act Finish Object
// Script Author: Christian Whitehead/Simon Thomley
// Unpacked by Rubberduckycooly's script unpacker
// ----------------------------------

// Aliases
private alias object.value0  : object.timer
private alias object.value1  : object.textPos
private alias object.value2  : object.gotThroughTextPos
private alias object.value3  : object.timePos
private alias object.value4  : object.ringPos
private alias object.value5  : object.perfectPos
private alias object.value6  : object.totalPos
private alias object.value7  : object.timeBonus
private alias object.value8  : object.ringBonus
private alias object.value9  : object.perfectBonus
private alias object.value10 : object.hasPerfectBonus
private alias object.value11 : object.totalScore
private alias object.value12 : object.hasContinue

private alias TitleCard_value23 : TitleCard_showZoneText

// States
private alias 0 : ACTFINISH_INIT
private alias 1 : ACTFINISH_ENTERTEXT
private alias 2 : ACTFINISH_ACTFINISHJINGLE
private alias 3 : ACTFINISH_TALLYSCORE
private alias 4 : ACTFINISH_SHOWRESULTS
private alias 5 : ACTFINISH_LOADNEXTSTAGE
private alias 6 : ACTFINISH_GOTCONTINUE

// Static Values

// Tables

event ObjectMain
	options.touchControls = false
	switch object.state
	case ACTFINISH_INIT
		object.drawOrder = 6
		object.priority = PRIORITY_ACTIVE
		object.textPos = -384
		object.gotThroughTextPos = 384
		object.timePos = 640
		object.ringPos = 656
		object.perfectPos = 672
		object.totalPos = 688

		switch stage.minutes
		case 0
			if stage.seconds < 30
				object.timeBonus = 50000
			else
				if stage.seconds < 45
					object.timeBonus = 10000
				else
					object.timeBonus = 5000
				end if
			end if
			break

		case 1
			if stage.seconds < 30
				object.timeBonus = 4000
			else
				object.timeBonus = 3000
			end if
			break

		case 2
			object.timeBonus = 2000
			break

		case 3
			object.timeBonus = 1000
			break

		case 4
			object.timeBonus = 500
			break

		case 5
			object.timeBonus = 100
			break

		case 9
			if stage.debugMode == false
				if options.gameMode < 2
					if stage.seconds == 59
						// Cutting it really close there - give the player a ton of points
						object.timeBonus = 100000
					end if
				end if
			end if
			break

		end switch

		object.ringBonus = player[0].rings
		object.ringBonus *= 100

		// Calculate Perfect Bonus

		// Ring Property Values
		// 0 = All
		// 1 = ???
		// 2 = ??? (Not Needed for perfect?)

		switch stage.playerListPos
		case 0
		case 3
			temp0 = 0
			foreach (TypeName[Ring], arrayPos0, ALL_ENTITIES)
				if object[arrayPos0].propertyValue <= 1
					temp0++
				end if
			next
			break
		case 1
		case 2
			temp0 = 0
			foreach (TypeName[Ring], arrayPos0, ALL_ENTITIES)
				if object[arrayPos0].propertyValue != 2
					temp0++
				end if
			next
			break
		end switch

		// Perfect Bonus
		if temp0 == 0
			object.hasPerfectBonus = true
			object.perfectBonus = 500000
			if stage.debugMode == false
				CallNativeFunction2(SetAchievement, 6, 100)
			end if
		end if

		object.state++
		break

	case ACTFINISH_ENTERTEXT
		if object.textPos < 0
			object.textPos += 16
		end if
		if object.gotThroughTextPos > 0
			object.gotThroughTextPos -= 16
		end if
		if object.timePos > 0
			object.timePos -= 16
		end if
		if object.ringPos > 0
			object.ringPos -= 16
		end if
		if object.perfectPos > 0
			object.perfectPos -= 16
		end if
		if object.totalPos > 0
			object.totalPos -= 16
		else
			object.state++
		end if
		break

	case ACTFINISH_ACTFINISHJINGLE
		object.timer++
		if object.timer > 299
			object.timer = 0
			object.state++
		end if
		break

	case ACTFINISH_TALLYSCORE
		if object.ringBonus > 0
			object.ringBonus -= 100
			object.totalScore += 100
			player.score += 100
		end if

		if object.timeBonus > 0
			object.timeBonus -= 100
			object.totalScore += 100
			player.score += 100
		end if

		if object.perfectBonus > 0
			object.perfectBonus -= 100
			object.totalScore += 100
			player.score += 100
		end if

		CheckGreater(object.ringBonus, 0)
		temp0 = checkResult
		CheckGreater(object.timeBonus, 0)
		temp0 |= checkResult
		CheckGreater(object.perfectBonus, 0)
		temp0 |= checkResult
		if temp0 == true
			object.timer++
			if object.timer == 2
				PlaySfx(SfxName[Score Add], false)
				object.timer = 0
			end if
		else
			if options.vsMode == false
				if object.totalScore >= 100000
					object.state = ACTFINISH_GOTCONTINUE
				else
					object.state++
				end if
			else
				object.state++
			end if
			object.timer = 0
			PlaySfx(SfxName[Score Total], false)
		end if
		break

	case ACTFINISH_GOTCONTINUE
		object.timer++
		if object.timer == 60
			object.timer = 0
			object.hasContinue = true
			player.continues++
			PlaySfx(SfxName[Continue], false)
			object.state = ACTFINISH_SHOWRESULTS
		end if
		break

	case ACTFINISH_SHOWRESULTS
		object.timer++
		if object.timer == 160
			object.timer = 0
			object.state++
		end if
		break

	case ACTFINISH_LOADNEXTSTAGE
		object.timer += 4
		global1 = object.timer



		if stage.actNum == 2
			FadeSpeed = 4
			CallFunction(GenesisFadeOut)
		end if



		if object.timer >= 250
			stage.listPos++
			LoadStage()
			fadeColor = 0
			starPostID = 0
			object.direction = FLIP_NONE
		end if
		break

	end switch
end event


event ObjectDraw












				ReadSaveRAM()
				arrayPos2 = saveRAM[1054]
				abs(arrayPos2)
				arrayPos2 += 1023
				object[0].value0 = arrayPos2
				saveRAM[arrayPos2] = stage.listPos
				saveRAM[arrayPos2] /= 2
				if saveRAM[arrayPos2] == 0
					saveRAM[arrayPos2] = 1
				end if


				WriteSaveRAM()
				object[0].value0 = arrayPos2
				if temp0 > saveRAM[arrayPos2]
				end if

	SetActivePalette(0, 0, screen.ysize)

	temp7 = object.textPos
	temp7 += screen.xcenter

	DrawSpriteScreenXY(0, temp7, 64)
	DrawSpriteScreenXY(1, temp7, 64)

	temp7 = object.gotThroughTextPos
	temp7 += screen.xcenter
	DrawSpriteScreenXY(2, temp7, 82)

	// Determine whether to show `got through zone` or `got through act`
	if TitleCard_showZoneText == false
		DrawSpriteScreenXY(3, temp7, 82)
		temp1 = stage.actNum
		temp1 += 4
		DrawSpriteScreenXY(temp1, temp7, 70)
	else
		DrawSpriteScreenXY(4, temp7, 82)
	end if

	temp7 = object.timePos
	temp7 += screen.xcenter
	DrawSpriteScreenXY(8, temp7, 120)
	DrawSpriteScreenXY(13, temp7, 120)
	temp7 += 88
	DrawNumbers(14, temp7, 121, object.timeBonus, 6, 8, 0)

	temp7 = object.ringPos
	temp7 += screen.xcenter
	DrawSpriteScreenXY(9, temp7, 136)
	DrawSpriteScreenXY(13, temp7, 136)
	temp7 += 88
	DrawNumbers(14, temp7, 137, object.ringBonus, 5, 8, 0)
	if object.hasPerfectBonus == true
		temp7 = object.perfectPos
		temp7 += screen.xcenter
		DrawSpriteScreenXY(10, temp7, 152)
		DrawSpriteScreenXY(11, temp7, 152)
		temp7 += 88
		DrawNumbers(14, temp7, 153, object.perfectBonus, 5, 8, 0)
	end if

	temp7 = object.totalPos
	temp7 += screen.xcenter
	DrawSpriteScreenXY(12, temp7, 168)
	temp7 += 88
	DrawNumbers(14, temp7, 169, object.totalScore, 6, 8, 0)
	if object.hasContinue == true
		GetBit(temp0, oscillation, 4)
		if temp0 == true
			GetBit(temp0, oscillation, 5)
			temp0 += 24
			temp1 = screen.xcenter
			temp1 += 112
			temp2 = screen.ycenter
			temp2 += 52
			DrawSpriteScreenXY(temp0, temp1, temp2)
		end if
	end if
end event


event ObjectStartup

	LoadSpriteSheet("Global/Display.gif")

	// Assign sprite frames based on current characters in play
	switch stage.playerListPos
	case 0
	case 3
		SpriteFrame(-64, 0, 72, 16, 1, 222)			// ? - #0
		SpriteFrame(16, 0, 48, 16, 1, 205)			// ? - #1
		break

	case 1
		// Determine Miles Vs Tails
		if options.region == false
			SpriteFrame(-61, 0, 69, 16, 74, 222)	// ? - #0
		else
			SpriteFrame(-71, 0, 79, 16, 144, 222)	// ? - #0
		end if
		SpriteFrame(16, 0, 48, 16, 1, 205)			// ? - #1
		break
		
	case 2
		SpriteFrame(-94, 0, 128, 16, 34, 188)		// ? - #0
		SpriteFrame(40, 0, 48, 16, 1, 205)			// ? - #1
		break

	end switch

	// Frames that are the same for everyone
	SpriteFrame(-88, 0, 112, 16, 50, 205) 			// ? - #2
	SpriteFrame(33, 0, 46, 16, 163, 205) 			// ? - #3
	SpriteFrame(33, 0, 62, 16, 83, 1) 				// ? - #4
	SpriteFrame(88, 0, 16, 29, 42, 1) 				// ? - #5
	SpriteFrame(88, 0, 23, 29, 59, 1) 				// ? - #6
	SpriteFrame(88, 0, 23, 32, 42, 31) 				// ? - #7
	SpriteFrame(-91, 1, 31, 11, 2, 17) 				// ? - #8
	SpriteFrame(-92, 1, 32, 11, 1, 33) 				// ? - #9
	SpriteFrame(-104, 1, 56, 11, 66, 35)			// ? - #10
	SpriteFrame(-40, 0, 44, 16, 190, 1) 			// ? - #11
	SpriteFrame(-71, 0, 43, 16, 146, 1) 			// ? - #12
	SpriteFrame(-52, 0, 44, 16, 190, 1) 			// ? - #13
	SpriteFrame(0, 0, 8, 11, 1, 50) 				// ? - #14
	SpriteFrame(0, 0, 8, 11, 10, 50)				// ? - #15
	SpriteFrame(0, 0, 8, 11, 19, 50)				// ? - #16
	SpriteFrame(0, 0, 8, 11, 28, 50)				// ? - #17
	SpriteFrame(0, 0, 8, 11, 1, 62) 				// ? - #18
	SpriteFrame(0, 0, 8, 11, 10, 62)				// ? - #19
	SpriteFrame(0, 0, 8, 11, 19, 62)				// ? - #20
	SpriteFrame(0, 0, 8, 11, 28, 62)				// ? - #21
	SpriteFrame(0, 0, 8, 11, 1, 74) 				// ? - #22
	SpriteFrame(0, 0, 8, 11, 10, 74)				// ? - #23

	switch stage.playerListPos
	case 0
	case 3
		SpriteFrame(-8, -11, 16, 23, 178, 113)		// ? - #24
		SpriteFrame(-8, -11, 16, 23, 195, 113)		// ? - #25
		break

	case 1
		SpriteFrame(-8, -11, 16, 23, 212, 113)		// ? - #24
		SpriteFrame(-8, -11, 16, 23, 229, 113)		// ? - #25
		break

	case 2
		SpriteFrame(-8, -11, 16, 23, 178, 137)		// ? - #24
		SpriteFrame(-8, -11, 16, 23, 195, 137)		// ? - #25
		break

	end switch
end event

event RSDKDraw
	DrawSprite(0)
end event

event RSDKLoad
	LoadSpriteSheet("Global/Display.gif")
	SpriteFrame(-16, -16, 32, 32, 1, 143)
end event
